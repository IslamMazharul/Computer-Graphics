import  csv
import  random
import  math
from Vector import *
#------------------------------------------------------------------------------------------------------------------

def loadCsv(filename):
    #will return 3 portions traninData testData Validation data
   # print filename
    lines = csv.reader(open(filename, "rb"))
    dataset = list(lines)
    #print dataset[0]
    data = []
    for i in range(0,len(dataset)):
        x = Vector(len(dataset[i]),1)
        y = Vector(2,1) # only one output
        #print len(dataset[i])
        # x is the input
        #y is the expected output
        x.Matrix[0][0]=1
        #print dataset[i]
        for j in range(1,len(dataset[i])):
            if j==1:
                if dataset[i][j-1]=='M':
                    x.Matrix[j][0] = 0.00
                elif dataset[j][0]=='F':
                    x.Matrix[j][0] = 1.00
                else:
                    x.Matrix[j][0] = 2.00
            else:
                x.Matrix[j][0] = float(dataset[i][j-1])

        y.Matrix[0][0] = 1.000
        y.Matrix[1][0] = float(dataset[i][len(dataset[i])-1])
       # print x.Matrix," ",y.Matrix
        data.append([x,y])
    return data
#################################################################################################################################
def splitData(copyDataset,siz):
    trainData = []
    validationData = []
    testData = []

    while(len(trainData)<siz):
        randomIndex = random.randrange(len(copyDataset))
        trainData.append(copyDataset.pop(randomIndex))

    while(len(testData)<siz):
        randomIndex = random.randrange(len(copyDataset))
        testData.append(copyDataset.pop(randomIndex))


    while(len(validationData)<siz):
        randomIndex = random.randrange(len(copyDataset))
        validationData.append(copyDataset.pop(randomIndex))

    return [trainData,validationData,testData]







































































































































































































































































































































































































































































































































accuracy1 = 35.78918354654645463434
eps = 899.335331998
























































































































































































































































































































































































































































































